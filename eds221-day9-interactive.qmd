---
title: "EDS 221 Day 9 Interactive Session"
author: "Anna Ramji"
format: html
editor: visual
---

# Day 9 Interactive session

## Setup

```{r}
library(tidyverse)
library(palmerpenguins)
# library(lubridate)
library(kableExtra)
library(janitor)
library(patchwork)
library(reprex)
```

## Warm-up:

Starting from penguins, create a new subset in which you:

1.  Only keep columns species, island, sex, body_mass_g, and flipper_length_mm
2.  Filter to only include Chinstrap and Gentoos
3.  rename the species column to penguin_species
4.  Create a summary table that contains the mean of body mass, the mean of flipper length, and the total count of observations each by species and sex

```{r}
penguins_warmup <- penguins |> 
  select(species, island, sex, body_mass_g, flipper_length_mm) |> 
  filter(species %in% c("Chinstrap", "Gentoo")) |> 
  # you could also rename in the select function
  rename(penguin_species = species) |> 
  group_by(penguin_species, sex) |> 
  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE),
            mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
            count = n())

penguins_warmup
```

## Across

a few variations on across from dplyr

Create a summary table of mean values for all numeric variables in the penguins dataset.

```{r}
# tedious way
# penguins |> 
#   group_by(species) |> 
#   summarize(mean_mass = ...,
#             mean_flipper = ....
#             mean_bill_length = ....,
#             etc.)

# better way:

penguins |> 
  group_by(species) |> 
  summarise(across(where(is.numeric), max, na.rm = TRUE))
```

columns where the name starts with bill, ends with mm

use helper functions like starts with and ends with

Calculate the mean value of all columns that start with "bill"

```{r}
penguins |> 
  group_by(species, island) |> 
  summarize(across(starts_with("bill"), mean, na.rm = TRUE))
```

```{r}

penguins |> 
  group_by(island, year) |> 
  summarize(across(ends_with("mm"), min, na.rm = TRUE))


```

Find and return both the mean and standard deviation of all columns starting with "bill", grouped by penguin species, and returning a new name that combines the original column with the function

```{r}
across_rename_example <- penguins |> 
  group_by(species) |> 
  summarize(across(starts_with("bill"), 
                   list(mean = mean,
                        sd = sd,
                        max = max), 
                   na.rm = TRUE, 
                   .names = "{.col}_{.fn}"))
across_rename_example
```

for all columns with numeric values

```{r}
across_rename_example_2 <- penguins |> 
  group_by(species) |> 
  summarize(across(where(is.numeric), 
                   list(mean = mean,
                        sd = sd,
                        max = max), 
                   na.rm = TRUE, 
                   .names = "{.col}_{.fn}"))
across_rename_example_2
```

M

```{r}
penguins_table_bad <- penguins |> 
  group_by(species, sex) |> 
  summarise(mean_mass = mean(body_mass_g, na.rm = TRUE),
            sd_mass = sd(body_mass_g, na.rm = TRUE))

penguins_table_bad
# ugly table in output. "raw tibble", no borders, row numbers still there, etc. 
```

Let's make a nicer looking table!!

Using kable(), kableExtra

default is alternating striped rows

?kable_styling in console

```{r}
penguins_table <- penguins |> 
  group_by(species, sex) |> 
  summarise(mean_mass = mean(body_mass_g, na.rm = TRUE),
            sd_mass = sd(body_mass_g, na.rm = TRUE)) |> 
  kable(col.names = c("Species", "Sex", "Mean body mass (g)", "SD body mass (g)")) 

penguins_table
```

```{r}
penguins_table_2 <- penguins |> 
  group_by(species, sex) |> 
  summarise(mean_mass = mean(body_mass_g, na.rm = TRUE),
            sd_mass = sd(body_mass_g, na.rm = TRUE)) |> 
  kable(col.names = c("Species", "Sex", "Mean body mass (g)", "SD body mass (g)")) |> 
  kable_styling(full_width = FALSE) # doesn't appear to do much?

penguins_table_2
```

## Patchwork

```{r}
chart1 <- penguins |> 
  ggplot(aes(x = body_mass_g, 
             y = flipper_length_mm)) +
  geom_point()

chart1
```

```{r}
chart2 <- penguins |> 
  ggplot(aes(x = bill_length_mm)) +
  geom_histogram()

chart2
```

Use patchwork package to combine these!

```{r}
chart1 + chart2 
```

```{r}
(chart1 + chart2 + chart1) / chart2
```

```{r}
((chart1 + chart2 + chart1) / (chart2 + chart1)) + chart1
```

patchwork package allows you to apply the same theme across all charts

cowplot is also cool :)

## How to add alt text and a figure caption

```{r}
#| fig-cap: Penguin body mass observations by species.
#| fig-alt: Jitterplot showing the body mass measurements (y-axis, in grams) for three penguin species (Adelie, Chinstrap, and Gentoo on x-axis) observed near Palmer Archipelago, Antarctica. Adelie and Chinstraps have similar body mass distributions, with Gentoos noticeably larger than both.

ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_jitter(width = 0.2, alpha = 0.5, color = "navy")

```

## Reprex time!!

create reproducible examples

library(tidyverse)

ggplot(data = mtcars, aes(x = mpg, y = hp)) +

geom_point()

copy selected code, reprex() in console, (automatically copied to clipboard), go to github repo, then issues, new issue, paste

```{r}
library(tidyverse)

ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point()

```

Instructions from legacy version:

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

## **1. Making a reproducible example ({reprex})**

Making a minimum viable example is often the best way to troubleshoot problematic code when you can\'t figure out a solution quickly -- and is *definitely* the best way to share an example of something you\'re struggling with so you\'re most likely to get help. If people can\'t run or play with your code, it\'s much less likely they\'ll be able to offer a solution.

You probably already have {reprex} (part of the tidyverse). Copy code to clipboard and run `reprex()` to make one!

Some guidelines:

-   Ruthlessly simplify

-   Consider using a subset of data (possibly w/ datapasta)

-   Include library calls (e.g. `library(janitor)` in the reprex)

-   Make the minimum viable example of the thing that\'s not working

See more:

-   [**https://community.rstudio.com/t/faq-how-to-do-a-minimal-reproducible-example-reprex-for-beginners/23061**](https://community.rstudio.com/t/faq-how-to-do-a-minimal-reproducible-example-reprex-for-beginners/23061)

-   [**https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html**](https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html)

```{r}

```

## **2. A few new wrangling tools (`dplyr::across()`, `janitor::get_dupes()`)**

### **janitor::get_dupes() to check for duplicates**

```{r}

```

### **dplyr::across() - operations across columns**

Mutate across multiple columns:

```{r}

```

```{r}

```

## **3. Tables with {kable} and {kableExtra}**

We can produce finalized tables in R Markdown in a number of ways - see a bunch of them in David Keyes\' post [***How to make beautiful tables in R.***](https://rfortherestofus.com/2019/11/how-to-make-beautiful-tables-in-r/)

We\'ll just use one tool: `kable` + `kableExtra` to make nice html tables.

Try it out of the box (knit to see the table):

```{r}

```

```{r}

```

## **4. A package for your ggplot theme**

### **Creating a package**

1.  In RStudio, create a new R Project that is an R Package (New Project \> New directory \> R Package). Make your package name something specific to you, e.g. `themes_yourname` (like `themes_teddy`). Make it a version controlled repo by running `usethis::use_git()` and `usethis::use_github()` (or w/ CLI).

2.  Check out the existing infrastructure for your R package, which currently contains a single function hello(), which prints \"Hello, world!\" Check out the R/hello.R file to see where that function is created.

3.  In the Build tab, click Install and Restart. You should see that the package is automatically attached in the Console.

4.  Run the hello() function in the Console, to see that it works.

5.  Create a new R **script** (.R). Copy and paste the following placeholder code into your R script. Then update the colors (in quotations) to colors that R will recognize (or hexidecimals) and change the function name to **theme_yourname** (e.g. theme_allison). You can also add other options within `theme()` to further customize your theme.
